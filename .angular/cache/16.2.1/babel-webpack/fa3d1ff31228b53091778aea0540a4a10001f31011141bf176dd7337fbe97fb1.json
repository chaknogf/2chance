{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class AnyToTextPipe {\n  transform(value) {\n    if (value == null || value === 0) {\n      return \" \";\n    }\n    // Convierte el número en texto según tu lógica de formato\n    const stringValue = value.toString();\n    const formattedValue = stringValue.replace(/(\\d{4})(\\d{5})(\\d{4})/, '$1 $2 $3');\n    return formattedValue;\n  }\n}\n_class = AnyToTextPipe;\n_class.ɵfac = function AnyToTextPipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"anyToText\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["AnyToTextPipe","transform","value","stringValue","toString","formattedValue","replace","pure"],"sources":["/Users/macbookairm2/Project/Consultas/2chance/src/app/pipe/anyToText.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'anyToText'\n})\nexport class AnyToTextPipe implements PipeTransform {\n\n\n  transform(value: any): string {\n    if (value == null || value === 0) {\n      return \" \";\n    }\n\n    // Convierte el número en texto según tu lógica de formato\n    const stringValue = value.toString();\n    const formattedValue = stringValue.replace(/(\\d{4})(\\d{5})(\\d{4})/, '$1 $2 $3');\n    return formattedValue;\n  }\n\n\n\n\n\n}\n"],"mappings":";;AAKA,OAAM,MAAOA,aAAa;EAGxBC,SAASA,CAACC,KAAU;IAClB,IAAIA,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAK,CAAC,EAAE;MAChC,OAAO,GAAG;;IAGZ;IACA,MAAMC,WAAW,GAAGD,KAAK,CAACE,QAAQ,EAAE;IACpC,MAAMC,cAAc,GAAGF,WAAW,CAACG,OAAO,CAAC,uBAAuB,EAAE,UAAU,CAAC;IAC/E,OAAOD,cAAc;EACvB;;SAZWL,aAAa;;mBAAbA,MAAa;AAAA;;;QAAbA,MAAa;EAAAO,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}