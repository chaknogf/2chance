{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class AnyToNumberPipe {\n  transform(value) {\n    if (typeof value === 'number') {\n      return value; // Si ya es un número, devolverlo tal cual.\n    } else if (typeof value === 'string') {\n      const numericValue = parseFloat(value);\n      if (!isNaN(numericValue)) {\n        return numericValue;\n      }\n    }\n    return null; // Devolver null si no se puede convertir a número.\n  }\n}\n_class = AnyToNumberPipe;\n_class.ɵfac = function AnyToNumberPipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"anyToNumber\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["AnyToNumberPipe","transform","value","numericValue","parseFloat","isNaN","pure"],"sources":["/Users/macbookairm2/Project/Consultas/2chance/src/app/pipe/anyToNumber.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'anyToNumber'\n})\nexport class AnyToNumberPipe implements PipeTransform {\n\n  transform(value: any): number | any {\n    if (typeof value === 'number') {\n      return value; // Si ya es un número, devolverlo tal cual.\n    } else if (typeof value === 'string') {\n      const numericValue = parseFloat(value);\n      if (!isNaN(numericValue)) {\n        return numericValue;\n      }\n    }\n\n    return null; // Devolver null si no se puede convertir a número.\n  }\n}\n"],"mappings":";;AAKA,OAAM,MAAOA,eAAe;EAE1BC,SAASA,CAACC,KAAU;IAClB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAOA,KAAK,CAAC,CAAC;KACf,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MACpC,MAAMC,YAAY,GAAGC,UAAU,CAACF,KAAK,CAAC;MACtC,IAAI,CAACG,KAAK,CAACF,YAAY,CAAC,EAAE;QACxB,OAAOA,YAAY;;;IAIvB,OAAO,IAAI,CAAC,CAAC;EACf;;SAbWH,eAAe;;mBAAfA,MAAe;AAAA;;;QAAfA,MAAe;EAAAM,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}