{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let TablaPacientesComponent = class TablaPacientesComponent {\n  constructor(pacientesService, router, activateRoute) {\n    this.pacientesService = pacientesService;\n    this.router = router;\n    this.activateRoute = activateRoute;\n    this.pacientes = []; // Registros a mostrar en la página actual\n    this.filteredPacientes = [];\n    this.searchText = '';\n    this.totalRegistros = 12; // Total de registros en la lista\n    this.paginaActual = 1; // Página actual\n    this.expedienteBuscar = '';\n    this.nombreBuscar = '';\n    this.apellidoBuscar = '';\n    this.dpiBuscar = '';\n    this.reset = false;\n    this.busqueda = '';\n    this.order = 'asc';\n  }\n  ngOnInit() {\n    this.getPacientes();\n    this.paginarPacientes();\n  }\n  getPacientes() {\n    this.pacientesService.getPacientes().subscribe(data => {\n      this.pacientes = data.sort((a, b) => b.expediente - a.expediente);\n      this.filteredPacientes = data;\n      this.paginarPacientes(); //Llama a la función aquí para paginar automáticamente\n    });\n  }\n\n  delete(id) {\n    this.pacientesService.deletePaciente(id).subscribe(data => {\n      this.pacientes = data;\n      this.ngOnInit();\n    });\n  }\n  sortTable(colu) {\n    if (this.order === 'asc') {\n      this.pacientes.sort((a, b) => a[colu] > b[colu] ? 1 : -1);\n      this.order = 'desc';\n    } else {\n      this.pacientes.sort((a, b) => a[colu] < b[colu] ? 1 : -1);\n      this.order = 'asc';\n    }\n  }\n  onPageChange(pageNumber) {\n    this.paginaActual = pageNumber;\n    this.paginarPacientes();\n  }\n  paginarPacientes() {\n    const tamanoPagina = 12;\n    const indiceInicio = (this.paginaActual - 1) * tamanoPagina;\n    const indiceFin = indiceInicio + tamanoPagina;\n    this.filteredPacientes = this.pacientes.slice(indiceInicio, indiceFin);\n    this.totalRegistros = this.filteredPacientes.length; // Agrega esta línea para actualizar el número total de registros por página\n  }\n\n  getPaginas() {\n    const totalPaginas = Math.ceil(this.filteredPacientes.length / this.totalRegistros);\n    // Verificar si totalPaginas es válido antes de crear el array\n    if (totalPaginas <= 0) {\n      return [];\n    }\n    return Array.from({\n      length: 10\n    }, (_, index) => index + 1);\n  }\n  totalPaginas() {\n    return Math.ceil(this.pacientes.length / this.totalRegistros);\n  }\n  buscarPaciente() {\n    if (this.expedienteBuscar !== 0) {\n      this.pacientesService.getPaciente(this.expedienteBuscar).subscribe(data => {\n        if (data) {\n          this.pacientes = [data]; // Establece el arreglo de pacientes para mostrar solo el resultado de la búsqueda\n          this.paginarPacientes(); // Pagina los resultados\n        } else {\n          // No se encontró ningún paciente con el número de expediente proporcionado\n          this.pacientes = [];\n          this.filteredPacientes = [];\n          this.totalRegistros = 0;\n        }\n      });\n    } else {\n      // ExpedienteBuscar es 0 o un valor inválido, muestra todos los pacientes\n      this.getPacientes();\n    }\n  }\n  limpiarInput() {\n    this.expedienteBuscar = ''; // Limpia el contenido del input\n    this.nombreBuscar = '';\n    this.apellidoBuscar = '';\n    this.getPacientes(); // Obtén todos los pacientes nuevamente\n  }\n\n  buscarPacientes() {\n    if (this.nombreBuscar || this.apellidoBuscar) {\n      this.pacientesService.getNombre(this.nombreBuscar, this.apellidoBuscar).subscribe(data => {\n        this.actualizarPacientes(data);\n      });\n    } else if (this.dpiBuscar) {\n      this.pacientesService.getdpi(this.dpiBuscar).subscribe(data => {\n        this.actualizarPacientes(data);\n      });\n    } else {\n      this.getPacientes();\n    }\n  }\n  actualizarPacientes(data) {\n    if (data.length > 0) {\n      this.pacientes = data.sort((a, b) => b.expediente - a.expediente);\n      this.filteredPacientes = data;\n      this.paginarPacientes();\n      this.dpiBuscar = '';\n      this.nombreBuscar = '';\n      this.apellidoBuscar = '';\n    } else {\n      this.pacientes = [];\n      this.filteredPacientes = [];\n      this.totalRegistros = 0;\n    }\n  }\n};\nTablaPacientesComponent = __decorate([Component({\n  selector: 'tablaPacientes',\n  templateUrl: './tablaPacientes.component.html',\n  styleUrls: ['./tablaPacientes.component.css']\n})], TablaPacientesComponent);","map":{"version":3,"names":["Component","TablaPacientesComponent","constructor","pacientesService","router","activateRoute","pacientes","filteredPacientes","searchText","totalRegistros","paginaActual","expedienteBuscar","nombreBuscar","apellidoBuscar","dpiBuscar","reset","busqueda","order","ngOnInit","getPacientes","paginarPacientes","subscribe","data","sort","a","b","expediente","delete","id","deletePaciente","sortTable","colu","onPageChange","pageNumber","tamanoPagina","indiceInicio","indiceFin","slice","length","getPaginas","totalPaginas","Math","ceil","Array","from","_","index","buscarPaciente","getPaciente","limpiarInput","buscarPacientes","getNombre","actualizarPacientes","getdpi","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/macbookairm2/Project/Consultas/2chance/src/app/pacientes/tablaPacientes/tablaPacientes.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { PacientesService } from 'src/app/services/pacientes.service';\nimport { Ipaciente } from 'src/app/models/Ipaciente';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n\n@Component({\n  selector: 'tablaPacientes',\n  templateUrl: './tablaPacientes.component.html',\n  styleUrls: ['./tablaPacientes.component.css']\n})\nexport class TablaPacientesComponent{\n  public pacientes: Ipaciente[] = []; // Registros a mostrar en la página actual\n  public filteredPacientes: Ipaciente[] = [];\n  public searchText: string = '';\n  public totalRegistros: number = 12; // Total de registros en la lista\n  public paginaActual: number = 1; // Página actual\n  public expedienteBuscar: any = '';\n  public nombreBuscar: string = '';\n  public apellidoBuscar: string = '';\n  public dpiBuscar: any = '';\n\n\n  constructor(private pacientesService: PacientesService, private router: Router, private activateRoute: ActivatedRoute) { }\n  reset: boolean = false;\n\n  ngOnInit() {\n    this.getPacientes();\n    this.paginarPacientes();\n\n\n  }\n\n\n  getPacientes() {\n    this.pacientesService.getPacientes().subscribe(data => {\n      this.pacientes = data.sort((a: { expediente: number; }, b: { expediente: number; }): number => b.expediente - a.expediente);\n      this.filteredPacientes = data;\n      this.paginarPacientes();//Llama a la función aquí para paginar automáticamente\n    });\n  }\n\n\n\n  delete(id: number) {\n    this.pacientesService.deletePaciente(id).subscribe(data => {\n      this.pacientes = data;\n      this.ngOnInit();\n    });\n  }\n\n\n\n\n  busqueda: string = '';\n  order: string = 'asc';\n\n\n\n  sortTable(colu: string) {\n    if (this.order === 'asc') {\n      this.pacientes.sort((a, b) => a[colu] > b[colu] ? 1 : -1);\n      this.order = 'desc';\n    } else {\n      this.pacientes.sort((a, b) => a[colu] < b[colu] ? 1 : -1);\n      this.order = 'asc';\n    }\n  }\n\n  onPageChange(pageNumber: number) {\n    this.paginaActual = pageNumber;\n    this.paginarPacientes();\n  }\n\n  paginarPacientes() {\n    const tamanoPagina = 12;\n    const indiceInicio = (this.paginaActual - 1) * tamanoPagina;\n    const indiceFin = indiceInicio + tamanoPagina;\n    this.filteredPacientes = this.pacientes.slice(indiceInicio, indiceFin);\n    this.totalRegistros = this.filteredPacientes.length; // Agrega esta línea para actualizar el número total de registros por página\n  }\n\n\n  getPaginas(): number[] {\n    const totalPaginas = Math.ceil(this.filteredPacientes.length / this.totalRegistros);\n\n    // Verificar si totalPaginas es válido antes de crear el array\n    if (totalPaginas <= 0) {\n      return [];\n    }\n\n    return Array.from({ length: 10 }, (_, index) => index + 1);\n  }\n\n\n  totalPaginas(): number {\n    return Math.ceil(this.pacientes.length / this.totalRegistros);\n\n  }\n\n  buscarPaciente() {\n    if (this.expedienteBuscar !== 0) {\n      this.pacientesService.getPaciente(this.expedienteBuscar).subscribe(data => {\n        if (data) {\n          this.pacientes = [data]; // Establece el arreglo de pacientes para mostrar solo el resultado de la búsqueda\n          this.paginarPacientes(); // Pagina los resultados\n        } else {\n          // No se encontró ningún paciente con el número de expediente proporcionado\n          this.pacientes = [];\n          this.filteredPacientes = [];\n          this.totalRegistros = 0;\n        }\n      });\n    } else {\n      // ExpedienteBuscar es 0 o un valor inválido, muestra todos los pacientes\n      this.getPacientes();\n    }\n  }\n\n  limpiarInput() {\n    this.expedienteBuscar = ''; // Limpia el contenido del input\n    this.nombreBuscar = '';\n    this.apellidoBuscar = ''\n    this.getPacientes(); // Obtén todos los pacientes nuevamente\n  }\n\n  buscarPacientes() {\n    if (this.nombreBuscar || this.apellidoBuscar) {\n      this.pacientesService.getNombre(this.nombreBuscar, this.apellidoBuscar).subscribe(data => {\n        this.actualizarPacientes(data);\n\n      });\n    } else if (this.dpiBuscar) {\n      this.pacientesService.getdpi(this.dpiBuscar).subscribe(data => {\n        this.actualizarPacientes(data);\n\n\n      });\n    } else {\n      this.getPacientes();\n    }\n  }\n\n  private actualizarPacientes(data: any[]) {\n    if (data.length > 0) {\n      this.pacientes = data.sort((a: { expediente: number; }, b: { expediente: number; }) => b.expediente - a.expediente);\n      this.filteredPacientes = data;\n      this.paginarPacientes();\n      this.dpiBuscar = '';\n      this.nombreBuscar = '';\n      this.apellidoBuscar = ''\n    } else {\n      this.pacientes = [];\n      this.filteredPacientes = [];\n      this.totalRegistros = 0;\n    }\n  }\n\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}