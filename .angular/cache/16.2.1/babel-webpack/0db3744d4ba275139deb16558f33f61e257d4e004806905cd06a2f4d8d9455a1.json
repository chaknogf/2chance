{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostBinding } from '@angular/core';\nimport { nacionalidades } from 'src/app/enums/enums';\nimport { municipio } from 'src/app/enums/enums';\nimport { etnias } from 'src/app/enums/enums';\nimport { ecivil } from 'src/app/enums/enums';\nimport { academic } from 'src/app/enums/enums';\nimport { parents } from 'src/app/enums/enums';\nimport { lenguaje } from 'src/app/enums/enums';\n//import { FortmatPhone } from 'src/app/pipe/telefono.pipe';\nexport let FormularioPacienteComponent = class FormularioPacienteComponent {\n  constructor(PacientesService, router, activateRoute, formBuilder) {\n    this.PacientesService = PacientesService;\n    this.router = router;\n    this.activateRoute = activateRoute;\n    this.formBuilder = formBuilder;\n    this.pacientes = [];\n    this.clases = 'row';\n    // Objeto del paciente\n    this.p = {\n      id: 0,\n      expediente: 0,\n      nombre: \"\",\n      apellido: \"\",\n      dpi: 0,\n      pasaporte: \"\",\n      sexo: \"\",\n      nacimiento: new Date(),\n      nacionalidad: 1,\n      lugar_nacimiento: 0,\n      estado_civil: 0,\n      educacion: 0,\n      pueblo: 0,\n      idioma: 0,\n      ocupacion: \"\",\n      direccion: \"\",\n      telefono: \"\",\n      email: \"user@example.com\",\n      padre: \"\",\n      madre: \"\",\n      responsable: \"\",\n      parentesco: 0,\n      dpi_responsable: 0,\n      telefono_responsable: 0,\n      estado: \"v\",\n      exp_madre: 0,\n      user: \"admin\",\n      fechaDefuncion: \"\",\n      municipio: \"\",\n      nation: \"\",\n      people: \"\",\n      ecivil: \"\",\n      academic: \"\",\n      parents: \"\",\n      lenguage: \"\"\n    };\n    this.e = {\n      municipio: municipio,\n      nation: nacionalidades,\n      people: etnias,\n      ecivil: ecivil,\n      academic: academic,\n      parents: parents,\n      lenguage: lenguaje\n    };\n    this.edit = false;\n    this.isDead = false; // Variable para el estado de fallecido (checkbox)\n    //Variables para el expediente\n    this.nuevoExp = 0;\n    this.exp = this.NuevoExp();\n  }\n  ngOnInit() {\n    // Obtener el expediente del paciente\n    //this.NuevoExp()\n    // Obtener los parámetros de la ruta\n    const params = this.activateRoute.snapshot.params;\n    // Verificar si se proporcionó un ID de paciente\n    if (params['id']) {\n      this.PacientesService.getIdPaciente(params['id']).subscribe(data => {\n        this.p = data;\n        this.edit = true;\n      }, error => console.log(error));\n    }\n  }\n  crearPaciente() {\n    // Crear un nuevo paciente\n    this.PacientesService.crearPaciente(this.p).subscribe(data => {\n      this.p = data;\n      this.router.navigate(['/pacientes']);\n    });\n  }\n  editar() {\n    // Editar el paciente existente\n    this.PacientesService.editPaciente(this.p.expediente, this.p).subscribe(data => {\n      this.p = data;\n      this.router.navigate(['/pacientes']);\n    });\n  }\n  delete() {\n    this.PacientesService.deletePaciente(this.p.id).subscribe(data => {\n      this.pacientes = data;\n      this.ngOnInit(); // Actualizar la vista (si es necesario)\n    }, error => {\n      console.error('Error al eliminar paciente:', error);\n    });\n  }\n  NuevoExp() {\n    // Obtener el expediente del paciente inicialmente\n    this.PacientesService.Expediente().subscribe(data => {\n      if (this.edit == false) {\n        this.nuevoExp = data;\n        this.p.expediente = this.nuevoExp;\n      }\n    });\n    // Actualizar el expediente cada 3 segundos\n    // interval(3000).subscribe(() => {\n    //   this.PacientesService.Expediente().subscribe(data => {\n    //     this.nuevoExp = data;\n    //     this.p.expediente = this.nuevoExp;\n    //   });\n    // });\n  }\n\n  cambiarEstado() {\n    const confirmacion = confirm('¿Estás seguro de cambiar el estado?');\n    if (confirmacion) {\n      if (this.p.estado === 'm') {\n        this.p.estado = 'v';\n      } else {\n        this.p.estado = 'm';\n        this.p.fechaDefuncion = \"\"; // Asignar la fecha actual como fecha de defunción\n      }\n    }\n  }\n\n  formatPhoneNumber(inputValue) {\n    const numericAndSpaceValue = inputValue.replace(/[^\\d\\s]/g, '');\n    const formattedValue = numericAndSpaceValue.replace(/(\\d{8})(?=\\d)/g, '$1 ');\n    this.p.telefono = formattedValue;\n  }\n};\n__decorate([HostBinding('class')], FormularioPacienteComponent.prototype, \"clases\", void 0);\nFormularioPacienteComponent = __decorate([Component({\n  selector: 'formulario-paciente',\n  templateUrl: './formulario-paciente.component.html',\n  styleUrls: ['./formulario-paciente.component.css']\n})], FormularioPacienteComponent);","map":{"version":3,"names":["Component","HostBinding","nacionalidades","municipio","etnias","ecivil","academic","parents","lenguaje","FormularioPacienteComponent","constructor","PacientesService","router","activateRoute","formBuilder","pacientes","clases","p","id","expediente","nombre","apellido","dpi","pasaporte","sexo","nacimiento","Date","nacionalidad","lugar_nacimiento","estado_civil","educacion","pueblo","idioma","ocupacion","direccion","telefono","email","padre","madre","responsable","parentesco","dpi_responsable","telefono_responsable","estado","exp_madre","user","fechaDefuncion","nation","people","lenguage","e","edit","isDead","nuevoExp","exp","NuevoExp","ngOnInit","params","snapshot","getIdPaciente","subscribe","data","error","console","log","crearPaciente","navigate","editar","editPaciente","delete","deletePaciente","Expediente","cambiarEstado","confirmacion","confirm","formatPhoneNumber","inputValue","numericAndSpaceValue","replace","formattedValue","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/macbookairm2/Project/Consultas/2chance/src/app/pacientes/formulario-paciente/formulario-paciente.component.ts"],"sourcesContent":["import { Ienum } from 'src/app/models/Ienum';\nimport { interval } from 'rxjs';\nimport { PacientesService } from './../../services/pacientes.service';\nimport { Component, OnInit, HostBinding } from '@angular/core';\nimport { Ipaciente } from 'src/app/models/Ipaciente';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { nacionalidades } from 'src/app/enums/enums';\nimport { municipio } from 'src/app/enums/enums';\nimport { etnias } from 'src/app/enums/enums';\nimport { ecivil } from 'src/app/enums/enums';\nimport { academic } from 'src/app/enums/enums';\nimport { parents } from 'src/app/enums/enums';\nimport { lenguaje } from 'src/app/enums/enums';\n//import { FortmatPhone } from 'src/app/pipe/telefono.pipe';\n\n@Component({\n  selector: 'formulario-paciente',\n  templateUrl: './formulario-paciente.component.html',\n  styleUrls: ['./formulario-paciente.component.css']\n})\nexport class FormularioPacienteComponent implements OnInit {\n\n  public pacientes: Ipaciente[] = [];\n  @HostBinding('class') clases = 'row';\n\n  // Objeto del paciente\n  p: Ipaciente = {\n    id: 0,\n    expediente: 0,\n    nombre: \"\",\n    apellido: \"\",\n    dpi: 0,\n    pasaporte: \"\",\n    sexo: \"\",\n    nacimiento: new Date(),\n    nacionalidad: 1,\n    lugar_nacimiento: 0,\n    estado_civil: 0,\n    educacion: 0,\n    pueblo: 0,\n    idioma: 0,\n    ocupacion: \"\",\n    direccion: \"\",\n    telefono: \"\",\n    email: \"user@example.com\",\n    padre: \"\",\n    madre: \"\",\n    responsable: \"\",\n    parentesco: 0,\n    dpi_responsable: 0,\n    telefono_responsable: 0,\n    estado: \"v\",\n    exp_madre: 0,\n    user: \"admin\",\n    fechaDefuncion: \"\",  // Variable para la fecha de defunción\n    municipio: \"\",\n    nation: \"\",\n    people: \"\",\n    ecivil: \"\",\n    academic: \"\",\n    parents: \"\",\n    lenguage: \"\"\n\n  };\n  e: Ienum = {\n    municipio: municipio,\n    nation: nacionalidades,\n    people: etnias,\n    ecivil: ecivil,\n    academic: academic,\n    parents: parents,\n    lenguage: lenguaje,\n\n\n  }\n\n\n  edit: boolean = false;\n  isDead: boolean = false; // Variable para el estado de fallecido (checkbox)\n\n  constructor(public PacientesService: PacientesService, private router: Router,\n    private activateRoute: ActivatedRoute, private formBuilder: FormBuilder,\n    ) { }\n\n  ngOnInit() {\n    // Obtener el expediente del paciente\n    //this.NuevoExp()\n\n\n    // Obtener los parámetros de la ruta\n    const params = this.activateRoute.snapshot.params;\n\n    // Verificar si se proporcionó un ID de paciente\n    if (params['id']) {\n      this.PacientesService.getIdPaciente(params['id'])\n        .subscribe(\n          data => {\n            this.p = data;\n            this.edit = true;\n          },\n          error => console.log(error)\n        )\n    }\n  }\n\n  crearPaciente(): void {\n    // Crear un nuevo paciente\n    this.PacientesService.crearPaciente(this.p).subscribe(data => {\n        this.p = data;\n        this.router.navigate(['/pacientes']);\n      })\n  }\n\n  editar() {\n    // Editar el paciente existente\n    this.PacientesService.editPaciente(this.p.expediente, this.p)\n      .subscribe(data => {\n        this.p = data;\n        this.router.navigate(['/pacientes']);\n      })\n  }\n\n  delete() {\n    this.PacientesService.deletePaciente(this.p.id)\n      .subscribe(data => {\n        this.pacientes = data;\n        this.ngOnInit();// Actualizar la vista (si es necesario)\n      },\n        error => {\n          console.error('Error al eliminar paciente:', error);\n        }\n    );\n  }\n  //Variables para el expediente\n  public nuevoExp: number = 0;\n  exp = this.NuevoExp()\n\n  NuevoExp() {\n    // Obtener el expediente del paciente inicialmente\n    this.PacientesService.Expediente().subscribe(data => {\n      if (this.edit == false) {\n        this.nuevoExp = data;\n        this.p.expediente = this.nuevoExp;\n      }\n    });\n\n    // Actualizar el expediente cada 3 segundos\n    // interval(3000).subscribe(() => {\n    //   this.PacientesService.Expediente().subscribe(data => {\n    //     this.nuevoExp = data;\n    //     this.p.expediente = this.nuevoExp;\n    //   });\n    // });\n  }\n\n\n\n  cambiarEstado() {\n\n    const confirmacion = confirm('¿Estás seguro de cambiar el estado?');\n    if (confirmacion) {\n      if (this.p.estado === 'm') {\n        this.p.estado = 'v';\n      } else {\n        this.p.estado = 'm';\n        this.p.fechaDefuncion = \"\"; // Asignar la fecha actual como fecha de defunción\n      }\n    }\n  }\n\n  formatPhoneNumber(inputValue: string) {\n    const numericAndSpaceValue = inputValue.replace(/[^\\d\\s]/g, '');\n    const formattedValue = numericAndSpaceValue.replace(/(\\d{8})(?=\\d)/g, '$1 ');\n    this.p.telefono = formattedValue;\n  }\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}